input MailingAddressInput  {
  address1: String
  address2: String
  city: String
  company: String
  country: String
  firstName: String
  lastName: String
  phone: String
  province: String
  zip: String
}

input CustomerUpdateInput  {
  acceptsMarketing: Boolean
  email: String
  firstName: String
  lastName: String
  password: String
  phone: String
}

input CustomerAccessTokenCreateInput {
  email: String!
  password: String!
}

input CustomerCreateInput {
  acceptsMarketing: Boolean
  email: String!
  firstName: String
  lastName: String
  password: String!
  phone: String
}

input CartInputMetafieldInput {
  # The key name of the metafield.
  key: String!
  # The type of data that the cart metafield stores. The type of data must be a supported type.
  type: String!
  # The data to store in the cart metafield. The data is always stored as a string, regardless of the metafield's type.
  value: String!
}

#The input fields to create a merchandise line on a cart.
input CartLineInput {
  # An array of key-value pairs that contains additional information about the merchandise line.
  attributes: [AttributeInput!]
  # The ID of the merchandise that the buyer intends to purchase.
  merchandiseId: ID!
  # The quantity of the merchandise.
  quantity: Int
  # The ID of the selling plan that the merchandise is being purchased with.
  sellingPlanId: ID
}

# The input fields to update a line item on a cart.
input CartLineUpdateInput {
  # An array of key-value pairs that contains additional information about the merchandise line.
  attributes: [AttributeInput!]
  # The ID of the merchandise line.
  id: ID!
  # The ID of the merchandise for the line item.
  merchandiseId: ID
  # The quantity of the line item.
  quantity: Int
  # The ID of the selling plan that the merchandise is being purchased with.
  sellingPlanId: ID
}

# The input fields for a filter used to view a subset of products in a collection. By default, the available and price filters are enabled. Filters are customized with the Shopify Search & Discovery app. Learn more about customizing storefront filtering.
input ProductFilter {
  # Filter on if the product is available for sale.
  available: Boolean
  # A range of prices to filter with-in.
  #price: PriceRangeFilter TODO: Implement PriceRangeFilter
  # A product metafield to filter on. TODO: Implement MetafieldFilter
  #productMetafield: MetafieldFilter
  # The product type to filter on.
  productType: String
  # The product vendor to filter on.
  productVendor: String
  # A product tag to filter on.
  tag: String
  # A variant metafield to filter on.
  #variantMetafield: MetafieldFilter TODO: Implement MetafieldFilter
  # A variant option to filter on.
  # variantOption: VariantOptionFilter TODO: Implement VariantOptionFilter
}

input MetaobjectHandleInput {
  # The handle of the metaobject.
  handle: String!
  # The type of the metaobject.
  type: String!
}

#The input fields required to create a checkout.
input CheckoutCreateInput {
  # Allows setting partial addresses on a Checkout, skipping the full validation of attributes.
  # The required attributes are city, province, and country. Full validation of addresses is still done at completion time. Defaults to null.
  allowPartialAddresses: Boolean
  # The identity of the customer associated with the checkout.
  buyerIdentity: String # CheckoutBuyerIdentityInput TODO: Implement CheckoutBuyerIdentityInput
  # A list of extra information that's added to the checkout.
  customAttributes: [AttributeInput!]
  # The email with which the customer wants to checkout.
  email: String
  # A list of line item objects, each one containing information about an item in the checkout.
  lineItems: String # [CheckoutLineItemInput!] TODO: Implement CheckoutLineItemInput
  # The text of an optional note that a shop owner can attach to the checkout.
  note: String
  # The three-letter currency code of one of the shop's enabled presentment currencies.
  # Including this field creates a checkout in the specified currency.
  # By default, new checkouts are created in the shop's primary currency.
  # Deprecated: Use the buyerIdentity.countryCode field instead.
  presentmentCurrencyCode: CurrencyCode
  # The shipping address to where the line items will be shipped.
  shippingAddress: MailingAddressInput
}

# The input fields for the identity of the customer associated with the checkout.
interface CheckoutBuyerIdentityInput {
  # The country code of one of the shop's enabled countries. For example, CA. Including this field creates a checkout in the specified country's currency.
  countryCode: CountryCode!
}

# The input fields to update a line item on the checkout.
input CheckoutLineItemUpdateInput {
  # Extra information in the form of an array of Key-Value pairs about the line item.
  customAttributes:[AttributeInput!]
  # The ID of the line item.
  id: ID
  # The quantity of the line item.
  quantity: Int
  # The variant ID of the line item.
  variantId: ID
}

# The input fields to create a line item on a checkout.
input CheckoutLineItemInput {
  # Extra information in the form of an array of Key-Value pairs about the line item.
  customAttributes:[AttributeInput!]
  # The quantity of the line item.
  quantity: Int
  # The variant ID of the line item.
  variantId: ID
}

# The input fields required to update a checkout's attributes.
input CheckoutAttributesUpdateV2Input {
  #	Allows setting partial addresses on a Checkout, skipping the full validation of attributes.
  #	The required attributes are city, province, and country. Full validation of the addresses is still done at completion time. Defaults to false with each operation.
  allowPartialAddresses: Boolean
  # A list of extra information that is added to the checkout.
  customAttributes: [AttributeInput!]
  # The text of an optional note that a shop owner can attach to the checkout.
  note: String
}

input DeliveryAddressInput {
  # The ID of a customer address that is associated with the buyer that is interacting with the cart.
  customerAddressId: ID

  # A delivery address preference of a buyer that is interacting with the cart.
  deliveryAddress: MailingAddressInput
}

input CartBuyerIdentityInput {
  # The country where the buyer is located.
  countryCode: CountryCode
  # The access token used to identify the customer associated with the cart.
  customerAccessToken: String
  # An ordered set of delivery addresses tied to the buyer that is interacting with the cart. The rank of the preferences is determined by the order of the addresses in the array. Preferences can be used to populate relevant fields in the checkout flow.
  # The input must not contain more than 250 values.
  deliveryAddressPreferences: [DeliveryAddressInput!]
  # The email address of the buyer that is interacting with the cart.
  email: String

  # The phone number of the buyer that is interacting with the cart.
  phone: String
  #A set of wallet preferences tied to the buyer that is interacting with the cart. Preferences can be used to populate relevant payment fields in the checkout flow. Accepted value: ["shop_pay"].
  # The input must not contain more than 250 values.
  walletPreferences: [String!]
}

# The input fields to create a cart.
input CartInput {
  # An array of key-value pairs that contains additional information about the cart.
  # The input must not contain more than 250 values.
  attributes: [AttributeInput!]
  # The customer associated with the cart. Used to determine [international pricing] (https://shopify.dev/custom-storefronts/internationalization/international-pricing). Buyer identity should match the customer's shipping address.
  buyerIdentity: CartBuyerIdentityInput
  # The case-insensitive discount codes that the customer added at checkout.
  # The input must not contain more than 250 values.
  discountCodes: [String!]
  # A list of merchandise lines to add to the cart.
  # The input must not contain more than 250 values.
  lines: [CartLineInput!]
  # The metafields to associate with this cart.
  # The input must not contain more than 250 values.
  metafields: [CartInputMetafieldInput!]
  # A note that's associated with the cart. For example, the note can be a personalized message to the buyer.
  note: String
}
