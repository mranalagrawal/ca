type CustomerUserError {
  code: CustomerErrorCode
  code: [String!]
  code: String!
}

#  An amount discounting the line that has been allocated by a discount.
type DiscountAllocation {
  #  Amount of discount allocated.
  allocatedAmount: MoneyV2!
  #  The discount this allocated amount originated from.
  discountApplication: DiscountApplication!
}

#  The value of the percentage pricing object.
type PricingPercentageValue {
  #  The percentage value of the object.
  percentage: Float!
}

# The cost of the merchandise line that the buyer will pay at checkout.
type CartLineCost {
  # The amount of the merchandise line.
  amountPerQuantity: MoneyV2!
  # The compare at amount of the merchandise line.
  compareAtAmountPerQuantity: MoneyV2
  # The cost of the merchandise line before line-level discounts.
  subtotalAmount: MoneyV2!
  # The total cost of the merchandise line.
  totalAmount: MoneyV2!
}

# Represents an association between a variant and a selling plan. Selling plan allocations describe the options offered for each variant, and the price of the variant when purchased with a selling plan.
type SellingPlanAllocation {
  #  The checkout charge amount due for the purchase.
  checkoutChargeAmount: MoneyV2!
  #  A list of price adjustments, with a maximum of two. When there are two, the first price adjustment goes into effect at the time of purchase, while the second one starts after a certain number of orders. A price adjustment represents how a selling plan affects pricing when a variant is purchased with a selling plan. Prices display in the customer's currency if the shop is configured for it.
  priceAdjustments: [SellingPlanAllocationPriceAdjustment!]!
  #  The remaining balance charge amount due for the purchase.
  remainingBalanceChargeAmount: MoneyV2!
  #  A representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'.
  sellingPlan: String # Todo: SellingPlan!
}

#The resulting prices for variants when they're purchased with a specific selling plan.
type SellingPlanAllocationPriceAdjustment {
  # The price of the variant when it's purchased without a selling plan for the same number of deliveries. For example, if a customer purchases 6 deliveries of $10.00 granola separately, then the price is 6 x $10.00 = $60.00.
  compareAtPrice: MoneyV2!
  # The effective price for a single delivery. For example, for a prepaid subscription plan that includes 6 deliveries at the price of $48.00, the per delivery price is $8.00.
  perDeliveryPrice: MoneyV2!
  # The price of the variant when it's purchased with a selling plan For example, for a prepaid subscription plan that includes 6 deliveries of $10.00 granola, where the customer gets 20% off, the price is 6 x $10.00 x 0.80 = $48.00.
  price: MoneyV2!
  #The resulting price per unit for the variant associated with the selling plan. If the variant isn't sold by quantity or measurement, then this field returns null.
  unitPrice: MoneyV2
}

# Represents an error that happens during execution of a cart mutation.
type CartUserError {
  # The error code.
  code: CartErrorCode
  # The path to the input field that caused the error.
  field: [String!]
  # The error message.
  message: String!
}
